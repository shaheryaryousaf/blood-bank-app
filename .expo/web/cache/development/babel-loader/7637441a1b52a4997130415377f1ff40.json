{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { CREATE_USER_SUCCESS, CREATE_USER_FAIL } from \"./types\";\nimport { auth, firebase2, db } from \"../config/firebase\";\nexport var signUp = function signUp(name, email, password) {\n  return function _callee(dispatch) {\n    var errorCode, errorMessage;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            try {\n              firebase2.auth().createUserWithEmailAndPassword(email, password).then(function (userCredential) {\n                var user = userCredential.user;\n                dispatch({\n                  type: CREATE_USER_SUCCESS,\n                  payload: {\n                    user: user\n                  }\n                });\n                console.log(userCredential.user);\n                console.log(userCredential.user.stsTokenManager);\n                console.log(userCredential.user.uid);\n                db.collection('profiles').doc(user.uid).set({\n                  email: user.email,\n                  name: name,\n                  password: password,\n                  user: user.uid\n                });\n              });\n            } catch (error) {\n              errorCode = error.code;\n              errorMessage = error.message;\n              console.log(errorCode);\n              console.log(errorMessage);\n              dispatch({\n                type: CREATE_USER_FAIL\n              });\n            }\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var fbLogin = function fbLogin() {\n  return function _callee2(dispatch) {\n    var provider;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            try {\n              provider = new auth.GoogleAuthProvider();\n              firebase2.auth().signInWithPopup(provider).then(function (result) {\n                var user = result.user;\n                var token = result.credential.accessToken;\n                dispatch({\n                  type: CREATE_USER_SUCCESS,\n                  payload: {\n                    user: user,\n                    token: token\n                  }\n                });\n                console.log(user);\n                console.log(user.displayName);\n              }).catch(function (error) {\n                console.log(error);\n              });\n            } catch (error) {\n              dispatch({\n                type: CREATE_USER_FAIL\n              });\n            }\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};","map":{"version":3,"sources":["H:/React/native/blood-bank/app/actions/Authentication.js"],"names":["CREATE_USER_SUCCESS","CREATE_USER_FAIL","auth","firebase2","db","signUp","name","email","password","dispatch","createUserWithEmailAndPassword","then","userCredential","user","type","payload","console","log","stsTokenManager","uid","collection","doc","set","error","errorCode","code","errorMessage","message","fbLogin","provider","GoogleAuthProvider","signInWithPopup","result","token","credential","accessToken","displayName","catch"],"mappings":";AAAA,SAASA,mBAAT,EAA8BC,gBAA9B;AACA,SAASC,IAAT,EAAeC,SAAf,EAA0BC,EAA1B;AAKA,OAAO,IAAMC,MAAM,GAAG,SAATA,MAAS,CAACC,IAAD,EAAOC,KAAP,EAAcC,QAAd;AAAA,SAA2B,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAC/C,gBAAI;AACFN,cAAAA,SAAS,CACND,IADH,GAEGQ,8BAFH,CAEkCH,KAFlC,EAEyCC,QAFzC,EAGGG,IAHH,CAGQ,UAACC,cAAD,EAAoB;AACxB,oBAAMC,IAAI,GAAGD,cAAc,CAACC,IAA5B;AACAJ,gBAAAA,QAAQ,CAAC;AACPK,kBAAAA,IAAI,EAAEd,mBADC;AAEPe,kBAAAA,OAAO,EAAE;AAAEF,oBAAAA,IAAI,EAAJA;AAAF;AAFF,iBAAD,CAAR;AAIAG,gBAAAA,OAAO,CAACC,GAAR,CAAYL,cAAc,CAACC,IAA3B;AACAG,gBAAAA,OAAO,CAACC,GAAR,CAAYL,cAAc,CAACC,IAAf,CAAoBK,eAAhC;AACAF,gBAAAA,OAAO,CAACC,GAAR,CAAYL,cAAc,CAACC,IAAf,CAAoBM,GAAhC;AACAf,gBAAAA,EAAE,CAACgB,UAAH,CAAc,UAAd,EAA0BC,GAA1B,CAA8BR,IAAI,CAACM,GAAnC,EAAwCG,GAAxC,CAA4C;AAC1Cf,kBAAAA,KAAK,EAAEM,IAAI,CAACN,KAD8B;AAE1CD,kBAAAA,IAAI,EAAEA,IAFoC;AAG1CE,kBAAAA,QAAQ,EAAEA,QAHgC;AAI1CK,kBAAAA,IAAI,EAAEA,IAAI,CAACM;AAJ+B,iBAA5C;AAMD,eAlBH;AAmBD,aApBD,CAoBE,OAAOI,KAAP,EAAc;AACVC,cAAAA,SADU,GACED,KAAK,CAACE,IADR;AAEVC,cAAAA,YAFU,GAEKH,KAAK,CAACI,OAFX;AAGdX,cAAAA,OAAO,CAACC,GAAR,CAAYO,SAAZ;AACAR,cAAAA,OAAO,CAACC,GAAR,CAAYS,YAAZ;AACAjB,cAAAA,QAAQ,CAAC;AACPK,gBAAAA,IAAI,EAAEb;AADC,eAAD,CAAR;AAGD;;AA7B8C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA3B;AAAA,CAAf;AAuDP,OAAO,IAAM2B,OAAO,GAAG,SAAVA,OAAU;AAAA,SAAM,kBAAOnB,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAC3B,gBAAI;AACEoB,cAAAA,QADF,GACa,IAAI3B,IAAI,CAAC4B,kBAAT,EADb;AAEF3B,cAAAA,SAAS,CACND,IADH,GAEG6B,eAFH,CAEmBF,QAFnB,EAGGlB,IAHH,CAGQ,UAAUqB,MAAV,EAAkB;AACtB,oBAAInB,IAAI,GAAGmB,MAAM,CAACnB,IAAlB;AACA,oBAAIoB,KAAK,GAAGD,MAAM,CAACE,UAAP,CAAkBC,WAA9B;AAEA1B,gBAAAA,QAAQ,CAAC;AACPK,kBAAAA,IAAI,EAAEd,mBADC;AAEPe,kBAAAA,OAAO,EAAE;AAAEF,oBAAAA,IAAI,EAAJA,IAAF;AAAQoB,oBAAAA,KAAK,EAALA;AAAR;AAFF,iBAAD,CAAR;AAIAjB,gBAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AACAG,gBAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAI,CAACuB,WAAjB;AACD,eAbH,EAcGC,KAdH,CAcS,UAAUd,KAAV,EAAiB;AACtBP,gBAAAA,OAAO,CAACC,GAAR,CAAYM,KAAZ;AACD,eAhBH;AAiBD,aAnBD,CAmBE,OAAOA,KAAP,EAAc;AACdd,cAAAA,QAAQ,CAAC;AACPK,gBAAAA,IAAI,EAAEb;AADC,eAAD,CAAR;AAGD;;AAxB0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAN;AAAA,CAAhB","sourcesContent":["import { CREATE_USER_SUCCESS, CREATE_USER_FAIL } from './types'\r\nimport { auth, firebase2, db } from '../config/firebase'\r\n\r\n// import * as firebase from 'firebase'\r\n// import 'firebase/firestore'\r\n\r\nexport const signUp = (name, email, password) => async (dispatch) => {\r\n  try {\r\n    firebase2\r\n      .auth()\r\n      .createUserWithEmailAndPassword(email, password)\r\n      .then((userCredential) => {\r\n        const user = userCredential.user\r\n        dispatch({\r\n          type: CREATE_USER_SUCCESS,\r\n          payload: { user },\r\n        })\r\n        console.log(userCredential.user)\r\n        console.log(userCredential.user.stsTokenManager)\r\n        console.log(userCredential.user.uid)\r\n        db.collection('profiles').doc(user.uid).set({\r\n          email: user.email,\r\n          name: name,\r\n          password: password,\r\n          user: user.uid,\r\n        })\r\n      })\r\n  } catch (error) {\r\n    var errorCode = error.code\r\n    var errorMessage = error.message\r\n    console.log(errorCode)\r\n    console.log(errorMessage)\r\n    dispatch({\r\n      type: CREATE_USER_FAIL,\r\n    })\r\n  }\r\n}\r\n\r\n// export const signUp = (name, email, password) => async (dispatch) => {\r\n//   try {\r\n//     await firebase.auth().createUserWithEmailAndPassword(email, password)\r\n//     const currentUser = firebase.auth().currentUser\r\n\r\n//     console.log(currentUser.user)\r\n\r\n//     const db = firebase.firestore()\r\n//     db.collection('profiles').doc(currentUser.uid).set({\r\n//       email: currentUser.email,\r\n//       name: name,\r\n//       password: password,\r\n//       user: currentUser.uid,\r\n//     })\r\n//   } catch (error) {\r\n//     var errorCode = error.code\r\n//     var errorMessage = error.message\r\n//     dispatch({\r\n//       type: CREATE_USER_FAIL,\r\n//     })\r\n//   }\r\n// }\r\n\r\nexport const fbLogin = () => async (dispatch) => {\r\n  try {\r\n    var provider = new auth.GoogleAuthProvider()\r\n    firebase2\r\n      .auth()\r\n      .signInWithPopup(provider)\r\n      .then(function (result) {\r\n        var user = result.user\r\n        var token = result.credential.accessToken\r\n\r\n        dispatch({\r\n          type: CREATE_USER_SUCCESS,\r\n          payload: { user, token },\r\n        })\r\n        console.log(user)\r\n        console.log(user.displayName)\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error)\r\n      })\r\n  } catch (error) {\r\n    dispatch({\r\n      type: CREATE_USER_FAIL,\r\n    })\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}