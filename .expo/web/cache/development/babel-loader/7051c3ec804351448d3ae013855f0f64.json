{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { CREATE_USER_SUCCESS, CREATE_USER_FAIL } from \"./types\";\nimport * as firebase from 'firebase';\nimport 'firebase/firestore';\nexport var signUp = function signUp(name, email, password) {\n  return function _callee(dispatch) {\n    var currentUser, db, errorCode, errorMessage;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(firebase.auth().createUserWithEmailAndPassword(email, password));\n\n          case 3:\n            currentUser = firebase.auth().currentUser;\n            console.log(currentUser);\n            db = firebase.firestore();\n            db.collection('profiles').doc(currentUser.uid).set({\n              email: currentUser.email,\n              name: name,\n              password: password,\n              user: currentUser.uid\n            });\n            db.collection('users').doc(currentUser.uid).set({\n              email: currentUser.email,\n              name: name,\n              password: password,\n              user: currentUser.uid\n            });\n            _context.next = 15;\n            break;\n\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context[\"catch\"](0);\n            errorCode = _context.t0.code;\n            errorMessage = _context.t0.message;\n            dispatch({\n              type: CREATE_USER_FAIL\n            });\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 10]], Promise);\n  };\n};\nexport function registration(email, password, name) {\n  var currentUser, db;\n  return _regeneratorRuntime.async(function registration$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(firebase2.auth().createUserWithEmailAndPassword(email, password));\n\n        case 3:\n          currentUser = firebase.auth().currentUser;\n          db = firebase2.firestore();\n          db.collection('profiles').doc(currentUser.uid).set({\n            email: currentUser.email,\n            name: name\n          });\n          _context2.next = 11;\n          break;\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](0);\n          Alert.alert('There is something wrong!!!!', _context2.t0.message);\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[0, 8]], Promise);\n}","map":{"version":3,"sources":["H:/React/native/blood-bank/app/actions/Authentication.js"],"names":["CREATE_USER_SUCCESS","CREATE_USER_FAIL","firebase","signUp","name","email","password","dispatch","auth","createUserWithEmailAndPassword","currentUser","console","log","db","firestore","collection","doc","uid","set","user","errorCode","code","errorMessage","message","type","registration","firebase2","Alert","alert"],"mappings":";AAAA,SAASA,mBAAT,EAA8BC,gBAA9B;AAGA,OAAO,KAAKC,QAAZ,MAA0B,UAA1B;AACA,OAAO,oBAAP;AA4BA,OAAO,IAAMC,MAAM,GAAG,SAATA,MAAS,CAACC,IAAD,EAAOC,KAAP,EAAcC,QAAd;AAAA,SAA2B,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAEvCL,QAAQ,CAACM,IAAT,GAAgBC,8BAAhB,CAA+CJ,KAA/C,EAAsDC,QAAtD,CAFuC;;AAAA;AAGvCI,YAAAA,WAHuC,GAGzBR,QAAQ,CAACM,IAAT,GAAgBE,WAHS;AAK7CC,YAAAA,OAAO,CAACC,GAAR,CAAYF,WAAZ;AAEMG,YAAAA,EAPuC,GAOlCX,QAAQ,CAACY,SAAT,EAPkC;AAQ7CD,YAAAA,EAAE,CAACE,UAAH,CAAc,UAAd,EAA0BC,GAA1B,CAA8BN,WAAW,CAACO,GAA1C,EAA+CC,GAA/C,CAAmD;AACjDb,cAAAA,KAAK,EAAEK,WAAW,CAACL,KAD8B;AAEjDD,cAAAA,IAAI,EAAEA,IAF2C;AAGjDE,cAAAA,QAAQ,EAAEA,QAHuC;AAIjDa,cAAAA,IAAI,EAAET,WAAW,CAACO;AAJ+B,aAAnD;AAOAJ,YAAAA,EAAE,CAACE,UAAH,CAAc,OAAd,EAAuBC,GAAvB,CAA2BN,WAAW,CAACO,GAAvC,EAA4CC,GAA5C,CAAgD;AAC9Cb,cAAAA,KAAK,EAAEK,WAAW,CAACL,KAD2B;AAE9CD,cAAAA,IAAI,EAAEA,IAFwC;AAG9CE,cAAAA,QAAQ,EAAEA,QAHoC;AAI9Ca,cAAAA,IAAI,EAAET,WAAW,CAACO;AAJ4B,aAAhD;AAf6C;AAAA;;AAAA;AAAA;AAAA;AAsBzCG,YAAAA,SAtByC,GAsB7B,YAAMC,IAtBuB;AAuBzCC,YAAAA,YAvByC,GAuB1B,YAAMC,OAvBoB;AAwB7ChB,YAAAA,QAAQ,CAAC;AACPiB,cAAAA,IAAI,EAAEvB;AADC,aAAD,CAAR;;AAxB6C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA3B;AAAA,CAAf;AA8BP,OAAO,SAAewB,YAAf,CAA4BpB,KAA5B,EAAmCC,QAAnC,EAA6CF,IAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAEGsB,SAAS,CAAClB,IAAV,GAAiBC,8BAAjB,CAAgDJ,KAAhD,EAAuDC,QAAvD,CAFH;;AAAA;AAGGI,UAAAA,WAHH,GAGiBR,QAAQ,CAACM,IAAT,GAAgBE,WAHjC;AAKGG,UAAAA,EALH,GAKQa,SAAS,CAACZ,SAAV,EALR;AAMHD,UAAAA,EAAE,CAACE,UAAH,CAAc,UAAd,EAA0BC,GAA1B,CAA8BN,WAAW,CAACO,GAA1C,EAA+CC,GAA/C,CAAmD;AACjDb,YAAAA,KAAK,EAAEK,WAAW,CAACL,KAD8B;AAEjDD,YAAAA,IAAI,EAAEA;AAF2C,WAAnD;AANG;AAAA;;AAAA;AAAA;AAAA;AAWHuB,UAAAA,KAAK,CAACC,KAAN,CAAY,8BAAZ,EAA4C,aAAIL,OAAhD;;AAXG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { CREATE_USER_SUCCESS, CREATE_USER_FAIL } from './types'\r\n// import { auth, firebase2, db } from '../config/firebase'\r\n\r\nimport * as firebase from 'firebase'\r\nimport 'firebase/firestore'\r\n\r\n// export const signUp = (email, password) => async (dispatch) => {\r\n//   try {\r\n//     firebase2\r\n//       .auth()\r\n//       .createUserWithEmailAndPassword(email, password)\r\n//       .then((userCredential) => {\r\n//         const user = userCredential.user\r\n//         dispatch({\r\n//           type: CREATE_USER_SUCCESS,\r\n//           payload: { user },\r\n//         })\r\n//         console.log(userCredential.user)\r\n//         console.log(userCredential.user.stsTokenManager)\r\n//         console.log(userCredential.user.uid)\r\n//       })\r\n//   } catch (error) {\r\n//     var errorCode = error.code\r\n//     var errorMessage = error.message\r\n//     console.log(errorCode)\r\n//     console.log(errorMessage)\r\n//     dispatch({\r\n//       type: CREATE_USER_FAIL,\r\n//     })\r\n//   }\r\n// }\r\n\r\nexport const signUp = (name, email, password) => async (dispatch) => {\r\n  try {\r\n    await firebase.auth().createUserWithEmailAndPassword(email, password)\r\n    const currentUser = firebase.auth().currentUser\r\n\r\n    console.log(currentUser)\r\n\r\n    const db = firebase.firestore()\r\n    db.collection('profiles').doc(currentUser.uid).set({\r\n      email: currentUser.email,\r\n      name: name,\r\n      password: password,\r\n      user: currentUser.uid,\r\n    })\r\n\r\n    db.collection('users').doc(currentUser.uid).set({\r\n      email: currentUser.email,\r\n      name: name,\r\n      password: password,\r\n      user: currentUser.uid,\r\n    })\r\n  } catch (error) {\r\n    var errorCode = error.code\r\n    var errorMessage = error.message\r\n    dispatch({\r\n      type: CREATE_USER_FAIL,\r\n    })\r\n  }\r\n}\r\n\r\nexport async function registration(email, password, name) {\r\n  try {\r\n    await firebase2.auth().createUserWithEmailAndPassword(email, password)\r\n    const currentUser = firebase.auth().currentUser\r\n\r\n    const db = firebase2.firestore()\r\n    db.collection('profiles').doc(currentUser.uid).set({\r\n      email: currentUser.email,\r\n      name: name,\r\n    })\r\n  } catch (err) {\r\n    Alert.alert('There is something wrong!!!!', err.message)\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}