{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { COMPLETE_PROFILE_SUCCESS, COMPLETE_PROFILE_FAIL, GET_PROFILE_SUCCESS, GET_PROFILE_FAIL } from \"./types\";\nimport { firestore } from \"../config/firebase\";\nexport var completeProfile = function completeProfile(data) {\n  return function _callee(dispatch) {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            try {\n              firestore.collection('profiles').doc(data.id).update({\n                phone: data.phone,\n                age: data.age,\n                blood_group: data.blood_group,\n                address: data.address,\n                city: data.city,\n                bio: data.bio\n              });\n              dispatch({\n                type: COMPLETE_PROFILE_SUCCESS,\n                payload: res\n              });\n            } catch (err) {\n              dispatch({\n                type: COMPLETE_PROFILE_FAIL\n              });\n            }\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var getProfile = function getProfile(data) {\n  return function _callee2(dispatch) {\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            try {\n              firestore.collection('profiles').doc(data).get().then(function (doc) {\n                if (doc.exists) {\n                  dispatch({\n                    type: GET_PROFILE_SUCCESS,\n                    payload: doc.data()\n                  });\n                } else {\n                  console.log('No such document!');\n                }\n              }).catch(function (error) {\n                console.log('Error getting document:', error);\n              });\n            } catch (err) {\n              dispatch({\n                type: GET_PROFILE_FAIL\n              });\n            }\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};","map":{"version":3,"sources":["H:/React/native/blood-bank/app/actions/Profile.js"],"names":["COMPLETE_PROFILE_SUCCESS","COMPLETE_PROFILE_FAIL","GET_PROFILE_SUCCESS","GET_PROFILE_FAIL","firestore","completeProfile","data","dispatch","collection","doc","id","update","phone","age","blood_group","address","city","bio","type","payload","res","err","getProfile","get","then","exists","console","log","catch","error"],"mappings":";AAAA,SACEA,wBADF,EAEEC,qBAFF,EAGEC,mBAHF,EAIEC,gBAJF;AAMA,SAASC,SAAT;AAKA,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,IAAD;AAAA,SAAU,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AACvC,gBAAI;AACFH,cAAAA,SAAS,CAACI,UAAV,CAAqB,UAArB,EAAiCC,GAAjC,CAAqCH,IAAI,CAACI,EAA1C,EAA8CC,MAA9C,CAAqD;AACnDC,gBAAAA,KAAK,EAAEN,IAAI,CAACM,KADuC;AAEnDC,gBAAAA,GAAG,EAAEP,IAAI,CAACO,GAFyC;AAGnDC,gBAAAA,WAAW,EAAER,IAAI,CAACQ,WAHiC;AAInDC,gBAAAA,OAAO,EAAET,IAAI,CAACS,OAJqC;AAKnDC,gBAAAA,IAAI,EAAEV,IAAI,CAACU,IALwC;AAMnDC,gBAAAA,GAAG,EAAEX,IAAI,CAACW;AANyC,eAArD;AAQAV,cAAAA,QAAQ,CAAC;AACPW,gBAAAA,IAAI,EAAElB,wBADC;AAEPmB,gBAAAA,OAAO,EAAEC;AAFF,eAAD,CAAR;AAID,aAbD,CAaE,OAAOC,GAAP,EAAY;AACZd,cAAAA,QAAQ,CAAC;AACPW,gBAAAA,IAAI,EAAEjB;AADC,eAAD,CAAR;AAGD;;AAlBsC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAV;AAAA,CAAxB;AAwBP,OAAO,IAAMqB,UAAU,GAAG,SAAbA,UAAa,CAAChB,IAAD;AAAA,SAAU,kBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAClC,gBAAI;AACFH,cAAAA,SAAS,CACNI,UADH,CACc,UADd,EAEGC,GAFH,CAEOH,IAFP,EAGGiB,GAHH,GAIGC,IAJH,CAIQ,UAAUf,GAAV,EAAe;AACnB,oBAAIA,GAAG,CAACgB,MAAR,EAAgB;AACdlB,kBAAAA,QAAQ,CAAC;AACPW,oBAAAA,IAAI,EAAEhB,mBADC;AAEPiB,oBAAAA,OAAO,EAAEV,GAAG,CAACH,IAAJ;AAFF,mBAAD,CAAR;AAID,iBALD,MAKO;AACLoB,kBAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACD;AACF,eAbH,EAcGC,KAdH,CAcS,UAAUC,KAAV,EAAiB;AACtBH,gBAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCE,KAAvC;AACD,eAhBH;AAiBD,aAlBD,CAkBE,OAAOR,GAAP,EAAY;AACZd,cAAAA,QAAQ,CAAC;AACPW,gBAAAA,IAAI,EAAEf;AADC,eAAD,CAAR;AAGD;;AAvBiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAV;AAAA,CAAnB","sourcesContent":["import {\r\n  COMPLETE_PROFILE_SUCCESS,\r\n  COMPLETE_PROFILE_FAIL,\r\n  GET_PROFILE_SUCCESS,\r\n  GET_PROFILE_FAIL,\r\n} from './types'\r\nimport { firestore } from '../config/firebase'\r\n\r\n/* ============================== */\r\n/* CREATE NEW USER PROFILE */\r\n/* ============================== */\r\nexport const completeProfile = (data) => async (dispatch) => {\r\n  try {\r\n    firestore.collection('profiles').doc(data.id).update({\r\n      phone: data.phone,\r\n      age: data.age,\r\n      blood_group: data.blood_group,\r\n      address: data.address,\r\n      city: data.city,\r\n      bio: data.bio,\r\n    })\r\n    dispatch({\r\n      type: COMPLETE_PROFILE_SUCCESS,\r\n      payload: res,\r\n    })\r\n  } catch (err) {\r\n    dispatch({\r\n      type: COMPLETE_PROFILE_FAIL,\r\n    })\r\n  }\r\n}\r\n\r\n/* ============================== */\r\n/* GET USER PROFILE */\r\n/* ============================== */\r\nexport const getProfile = (data) => async (dispatch) => {\r\n  try {\r\n    firestore\r\n      .collection('profiles')\r\n      .doc(data)\r\n      .get()\r\n      .then(function (doc) {\r\n        if (doc.exists) {\r\n          dispatch({\r\n            type: GET_PROFILE_SUCCESS,\r\n            payload: doc.data()\r\n          })\r\n        } else {\r\n          console.log('No such document!')\r\n        }\r\n      })\r\n      .catch(function (error) {\r\n        console.log('Error getting document:', error)\r\n      })\r\n  } catch (err) {\r\n    dispatch({\r\n      type: GET_PROFILE_FAIL,\r\n    })\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}