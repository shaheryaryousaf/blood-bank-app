{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { COMPLETE_PROFILE_SUCCESS, COMPLETE_PROFILE_FAIL, GET_PROFILE_SUCCESS, GET_PROFILE_FAIL, GET_ALL_PROFILES_SUCCESS, GET_ALL_PROFILES_FAIL } from \"./types\";\nimport { firestore } from \"../config/firebase\";\nexport var completeProfile = function completeProfile(data) {\n  return function _callee(dispatch) {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            try {\n              firestore.collection('profiles').doc(data.id).update({\n                phone: data.phone,\n                age: data.age,\n                blood_group: data.blood_group,\n                address: data.address,\n                city: data.city,\n                bio: data.bio\n              });\n              dispatch({\n                type: COMPLETE_PROFILE_SUCCESS,\n                payload: res\n              });\n            } catch (err) {\n              dispatch({\n                type: COMPLETE_PROFILE_FAIL\n              });\n            }\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var getAllProfiles = function getAllProfiles() {\n  return function _callee2(dispatch) {\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            try {\n              firestore.collection('profiles').on('value', function (snapshot) {\n                var itemsList = [];\n                snapshot.forEach(function (snap) {\n                  var key = snap.key;\n                  var data = snap.val();\n                  var name = data.name,\n                      blood_group = data.blood_group,\n                      id = data.id,\n                      city = data.city,\n                      address = data.address,\n                      phone = data.phone,\n                      bio = data.bio;\n                  itemsList.push({\n                    key: key,\n                    name: name,\n                    phone: phone,\n                    city: city,\n                    address: address,\n                    bio: bio,\n                    blood_group: blood_group,\n                    id: id\n                  });\n                });\n                dispatch({\n                  type: GET_ADS,\n                  payload: itemsList\n                });\n              });\n            } catch (error) {\n              dispatch({\n                type: GET_ALL_PROFILES_FAIL\n              });\n            }\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var getProfile = function getProfile(data) {\n  return function _callee3(dispatch) {\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            try {\n              firestore.collection('profiles').doc(data).get().then(function (doc) {\n                if (doc.exists) {\n                  dispatch({\n                    type: GET_PROFILE_SUCCESS,\n                    payload: doc.data()\n                  });\n                } else {\n                  dispatch({\n                    type: GET_PROFILE_FAIL\n                  });\n                }\n              }).catch(function (error) {\n                console.log('Error getting document:', error);\n              });\n            } catch (err) {\n              dispatch({\n                type: GET_PROFILE_FAIL\n              });\n            }\n\n          case 1:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};","map":{"version":3,"sources":["H:/React/native/blood-bank/app/actions/Profile.js"],"names":["COMPLETE_PROFILE_SUCCESS","COMPLETE_PROFILE_FAIL","GET_PROFILE_SUCCESS","GET_PROFILE_FAIL","GET_ALL_PROFILES_SUCCESS","GET_ALL_PROFILES_FAIL","firestore","completeProfile","data","dispatch","collection","doc","id","update","phone","age","blood_group","address","city","bio","type","payload","res","err","getAllProfiles","on","snapshot","itemsList","forEach","snap","key","val","name","push","GET_ADS","error","getProfile","get","then","exists","catch","console","log"],"mappings":"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","sourcesContent":["import {\r\n  COMPLETE_PROFILE_SUCCESS,\r\n  COMPLETE_PROFILE_FAIL,\r\n  GET_PROFILE_SUCCESS,\r\n  GET_PROFILE_FAIL,\r\n  GET_ALL_PROFILES_SUCCESS,\r\n  GET_ALL_PROFILES_FAIL,\r\n} from './types'\r\nimport { firestore } from '../config/firebase'\r\n\r\n/* ============================== */\r\n/* CREATE NEW USER PROFILE */\r\n/* ============================== */\r\nexport const completeProfile = (data) => async (dispatch) => {\r\n  try {\r\n    firestore.collection('profiles').doc(data.id).update({\r\n      phone: data.phone,\r\n      age: data.age,\r\n      blood_group: data.blood_group,\r\n      address: data.address,\r\n      city: data.city,\r\n      bio: data.bio,\r\n    })\r\n    dispatch({\r\n      type: COMPLETE_PROFILE_SUCCESS,\r\n      payload: res,\r\n    })\r\n  } catch (err) {\r\n    dispatch({\r\n      type: COMPLETE_PROFILE_FAIL,\r\n    })\r\n  }\r\n}\r\n\r\n/* ============================== */\r\n/* GET ALL PROFILES */\r\n/* ============================== */\r\nexport const getAllProfiles = () => async (dispatch) => {\r\n  try {\r\n    firestore.collection('profiles').on('value', (snapshot) => {\r\n      let itemsList = []\r\n      snapshot.forEach((snap) => {\r\n        var key = snap.key\r\n        var data = snap.val()\r\n        const { name, blood_group, id, city, address, phone, bio } = data\r\n        itemsList.push({\r\n          key: key,\r\n          name: name,\r\n          phone: phone,\r\n          city: city,\r\n          address: address,\r\n          bio: bio,\r\n          blood_group: blood_group,\r\n          id: id,\r\n        })\r\n      })\r\n      dispatch({\r\n        type: GET_ADS,\r\n        payload: itemsList,\r\n      })\r\n    })\r\n  } catch (error) {\r\n    dispatch({\r\n      type: GET_ALL_PROFILES_FAIL,\r\n    })\r\n  }\r\n}\r\n\r\n/* ============================== */\r\n/* GET USER PROFILE */\r\n/* ============================== */\r\nexport const getProfile = (data) => async (dispatch) => {\r\n  try {\r\n    firestore\r\n      .collection('profiles')\r\n      .doc(data)\r\n      .get()\r\n      .then(function (doc) {\r\n        if (doc.exists) {\r\n          dispatch({\r\n            type: GET_PROFILE_SUCCESS,\r\n            payload: doc.data(),\r\n          })\r\n        } else {\r\n          dispatch({\r\n            type: GET_PROFILE_FAIL,\r\n          })\r\n        }\r\n      })\r\n      .catch(function (error) {\r\n        console.log('Error getting document:', error)\r\n      })\r\n  } catch (err) {\r\n    dispatch({\r\n      type: GET_PROFILE_FAIL,\r\n    })\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}